(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |Benchmarks generated from hycomp (https://es-static.fbk.eu/tools/hycomp/). BMC instances of non-linear hybrid automata taken from: Alessandro Cimatti, Sergio Mover, Stefano Tonetta, A quantifier-free SMT encoding of non-linear hybrid automata, FMCAD 2012 and Alessandro Cimatti, Sergio Mover, Stefano Tonetta, Quantier-free encoding of invariants for Hybrid Systems, Formal Methods in System Design. This instance solves a BMC problem of depth 0 and uses the encoding obtained with quantifier elimination using redlog encoding. Contacts: Sergio Mover (mover@fbk.eu), Stefano Tonetta (tonettas@fbk.eu), Alessandro Cimatti (cimatti@fbk.eu).|)
(set-info :category "industrial")
(set-info :status unsat)
;; MathSAT API call trace
;; generated on Mon Mar 19 10:43:13 2012
(declare-fun b.y__AT0 () Real)
(declare-fun b.event_is_timed__AT0 () Bool)
(declare-fun b.counter.0__AT0 () Bool)
(declare-fun b.counter.1__AT0 () Bool)
(declare-fun b.counter.3__AT0 () Bool)
(declare-fun b.delta__AT0 () Real)
(declare-fun speed_loss__AT0 () Real)
(declare-fun b.counter.2__AT0 () Bool)
(declare-fun b.time__AT0 () Real)
(declare-fun b.speed_y__AT0 () Real)
(declare-fun b.EVENT.1__AT0 () Bool)
(declare-fun b.EVENT.0__AT0 () Bool)
(assert (let ((.def_65 (* 49.0 b.delta__AT0)))
(let ((.def_66 (* b.delta__AT0 .def_65)))
(let ((.def_68 (* (- 1.0) .def_66)))
(let ((.def_62 (* 10.0 b.speed_y__AT0)))
(let ((.def_63 (* b.delta__AT0 .def_62)))
(let ((.def_69 (+ .def_63 .def_68)))
(let ((.def_70 (* 10.0 b.y__AT0)))
(let ((.def_72 (+ .def_70 .def_69)))
(let ((.def_73 (<= 0.0 .def_72)))
(let ((.def_103 (not .def_73)))
(let ((.def_87 (* (- 49.0) b.delta__AT0)))
(let ((.def_76 (* 5.0 b.speed_y__AT0)))
(let ((.def_88 (+ .def_76 .def_87)))
(let ((.def_89 (<= 0.0 .def_88)))
(let ((.def_104 (and .def_89 .def_103)))
(let ((.def_99 (<= b.speed_y__AT0 0.0 )))
(let ((.def_52 (<= 0.0 b.y__AT0)))
(let ((.def_102 (or .def_52 .def_99)))
(let ((.def_105 (or .def_102 .def_104)))
(let ((.def_98 (<= b.y__AT0 0.0 )))
(let ((.def_100 (and .def_98 .def_99)))
(let ((.def_93 (<= .def_88 0.0 )))
(let ((.def_94 (not .def_93)))
(let ((.def_91 (= .def_72 0.0 )))
(let ((.def_92 (not .def_91)))
(let ((.def_95 (or .def_92 .def_94)))
(let ((.def_90 (or .def_73 .def_89)))
(let ((.def_96 (and .def_90 .def_95)))
(let ((.def_77 (* b.speed_y__AT0 .def_76)))
(let ((.def_79 (* 98.0 b.y__AT0)))
(let ((.def_81 (+ .def_79 .def_77)))
(let ((.def_84 (<= .def_81 0.0 )))
(let ((.def_85 (not .def_84)))
(let ((.def_97 (or .def_85 .def_96)))
(let ((.def_101 (or .def_97 .def_100)))
(let ((.def_106 (and .def_101 .def_105)))
(let ((.def_82 (<= 0.0 .def_81)))
(let ((.def_83 (not .def_82)))
(let ((.def_107 (or .def_83 .def_106)))
(let ((.def_60 (<= 0.0 b.delta__AT0)))
(let ((.def_61 (not .def_60)))
(let ((.def_74 (or .def_61 .def_73)))
(let ((.def_108 (and .def_74 .def_107)))
(let ((.def_41 (not b.EVENT.0__AT0)))
(let ((.def_39 (not b.EVENT.1__AT0)))
(let ((.def_57 (and .def_39 .def_41)))
(let ((.def_58 (not .def_57)))
(let ((.def_109 (or .def_58 .def_108)))
(let ((.def_50 (<= speed_loss__AT0 (/ 1 2))))
(let ((.def_47 (<= (/ 1 10) speed_loss__AT0)))
(let ((.def_51 (and .def_47 .def_50)))
(let ((.def_53 (and .def_51 .def_52)))
(let ((.def_42 (or .def_39 .def_41)))
(let ((.def_6 (not b.counter.0__AT0)))
(let ((.def_4 (not b.counter.1__AT0)))
(let ((.def_32 (or .def_4 .def_6)))
(let ((.def_36 (or b.counter.3__AT0 .def_32)))
(let ((.def_33 (or b.counter.2__AT0 .def_32)))
(let ((.def_9 (not b.counter.2__AT0)))
(let ((.def_31 (or .def_6 .def_9)))
(let ((.def_34 (and .def_31 .def_33)))
(let ((.def_12 (not b.counter.3__AT0)))
(let ((.def_35 (or .def_12 .def_34)))
(let ((.def_37 (and .def_35 .def_36)))
(let ((.def_43 (and .def_37 .def_42)))
(let ((.def_54 (and .def_43 .def_53)))
(let ((.def_7 (and .def_4 .def_6)))
(let ((.def_10 (and .def_7 .def_9)))
(let ((.def_29 (and .def_10 .def_12)))
(let ((.def_27 (= b.speed_y__AT0 0.0 )))
(let ((.def_24 (= b.y__AT0 10.0 )))
(let ((.def_19 (= b.time__AT0 0.0 )))
(let ((.def_21 (and .def_19 b.event_is_timed__AT0)))
(let ((.def_25 (and .def_21 .def_24)))
(let ((.def_28 (and .def_25 .def_27)))
(let ((.def_30 (and .def_28 .def_29)))
(let ((.def_55 (and .def_30 .def_54)))
(let ((.def_14 (or .def_7 b.counter.3__AT0)))
(let ((.def_13 (or .def_10 .def_12)))
(let ((.def_15 (and .def_13 .def_14)))
(let ((.def_16 (not .def_15)))
(let ((.def_56 (and .def_16 .def_55)))
(let ((.def_110 (and .def_56 .def_109)))
.def_110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
