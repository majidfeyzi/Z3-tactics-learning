(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |Benchmarks generated from hycomp (https://es-static.fbk.eu/tools/hycomp/). BMC instances of non-linear hybrid automata taken from: Alessandro Cimatti, Sergio Mover, Stefano Tonetta, A quantifier-free SMT encoding of non-linear hybrid automata, FMCAD 2012 and Alessandro Cimatti, Sergio Mover, Stefano Tonetta, Quantier-free encoding of invariants for Hybrid Systems, Formal Methods in System Design. This instance solves a BMC problem of depth 0 and uses the quantifier free encoding encoding. Contacts: Sergio Mover (mover@fbk.eu), Stefano Tonetta (tonettas@fbk.eu), Alessandro Cimatti (cimatti@fbk.eu).|)
(set-info :category "industrial")
(set-info :status unsat)
;; MathSAT API call trace
;; generated on Mon Mar 19 10:46:29 2012
(declare-fun b.time__AT0 () Real)
(declare-fun b.y__AT0 () Real)
(declare-fun b.counter.0__AT0 () Bool)
(declare-fun b.counter.1__AT0 () Bool)
(declare-fun b.counter.2__AT0 () Bool)
(declare-fun b.delta__AT0 () Real)
(declare-fun b.EVENT.0__AT0 () Bool)
(declare-fun b.EVENT.1__AT0 () Bool)
(declare-fun b.speed_loss__AT0 () Real)
(declare-fun b.counter.3__AT0 () Bool)
(declare-fun b.x__AT0 () Real)
(declare-fun b.speed_y__AT0 () Real)
(declare-fun b.event_is_timed__AT0 () Bool)
(declare-fun b.speed_x__AT0 () Real)
(assert (let ((.def_70 (* (- 1.0) b.speed_x__AT0)))
(let ((.def_71 (* b.speed_x__AT0 .def_70)))
(let ((.def_72 (* (- 1.0) .def_71)))
(let ((.def_106 (* 2.0 .def_72)))
(let ((.def_126 (* (- 1.0) .def_106)))
(let ((.def_127 (* b.delta__AT0 .def_126)))
(let ((.def_128 (* (- 5.0) .def_127)))
(let ((.def_52 (* (- 1.0) b.x__AT0)))
(let ((.def_85 (* b.speed_x__AT0 .def_52)))
(let ((.def_113 (* (- 5.0) .def_85)))
(let ((.def_133 (+ .def_113 .def_128)))
(let ((.def_80 (* b.x__AT0 .def_70)))
(let ((.def_111 (* (- 5.0) .def_80)))
(let ((.def_134 (+ .def_111 .def_133)))
(let ((.def_115 (* (- 49.0) b.delta__AT0)))
(let ((.def_135 (+ .def_115 .def_134)))
(let ((.def_117 (* 5.0 b.speed_y__AT0)))
(let ((.def_136 (+ .def_117 .def_135)))
(let ((.def_137 (<= .def_136 0.0 )))
(let ((.def_86 (* (- 1.0) .def_85)))
(let ((.def_81 (* (- 1.0) .def_80)))
(let ((.def_103 (+ .def_81 .def_86)))
(let ((.def_104 (+ b.speed_y__AT0 .def_103)))
(let ((.def_125 (<= .def_104 0.0 )))
(let ((.def_138 (and .def_125 .def_137)))
(let ((.def_107 (* b.delta__AT0 .def_106)))
(let ((.def_109 (* 5.0 .def_107)))
(let ((.def_119 (+ .def_113 .def_109)))
(let ((.def_120 (+ .def_111 .def_119)))
(let ((.def_121 (+ .def_115 .def_120)))
(let ((.def_122 (+ .def_117 .def_121)))
(let ((.def_123 (<= 0.0 .def_122)))
(let ((.def_105 (<= 0.0 .def_104)))
(let ((.def_124 (and .def_105 .def_123)))
(let ((.def_139 (or .def_124 .def_138)))
(let ((.def_87 (* b.delta__AT0 .def_86)))
(let ((.def_88 (* 10.0 .def_87)))
(let ((.def_82 (* b.delta__AT0 .def_81)))
(let ((.def_83 (* 10.0 .def_82)))
(let ((.def_95 (+ .def_83 .def_88)))
(let ((.def_69 (* b.delta__AT0 b.delta__AT0)))
(let ((.def_73 (* .def_69 .def_72)))
(let ((.def_74 (* 10.0 .def_73)))
(let ((.def_96 (+ .def_74 .def_95)))
(let ((.def_78 (* (- 49.0) .def_69)))
(let ((.def_97 (+ .def_78 .def_96)))
(let ((.def_67 (* b.speed_y__AT0 b.delta__AT0)))
(let ((.def_68 (* 10.0 .def_67)))
(let ((.def_98 (+ .def_68 .def_97)))
(let ((.def_53 (* b.x__AT0 .def_52)))
(let ((.def_91 (* (- 10.0) .def_53)))
(let ((.def_99 (+ .def_91 .def_98)))
(let ((.def_93 (* 10.0 b.y__AT0)))
(let ((.def_100 (+ .def_93 .def_99)))
(let ((.def_101 (<= 0.0 .def_100)))
(let ((.def_54 (<= .def_53 b.y__AT0)))
(let ((.def_102 (and .def_54 .def_101)))
(let ((.def_140 (and .def_102 .def_139)))
(let ((.def_60 (<= b.speed_loss__AT0 (/ 1 2))))
(let ((.def_57 (<= (/ 1 10) b.speed_loss__AT0)))
(let ((.def_61 (and .def_57 .def_60)))
(let ((.def_141 (and .def_61 .def_140)))
(let ((.def_62 (and .def_54 .def_61)))
(let ((.def_48 (not b.EVENT.0__AT0)))
(let ((.def_46 (not b.EVENT.1__AT0)))
(let ((.def_49 (or .def_46 .def_48)))
(let ((.def_6 (not b.counter.0__AT0)))
(let ((.def_4 (not b.counter.1__AT0)))
(let ((.def_39 (or .def_4 .def_6)))
(let ((.def_43 (or b.counter.3__AT0 .def_39)))
(let ((.def_40 (or b.counter.2__AT0 .def_39)))
(let ((.def_9 (not b.counter.2__AT0)))
(let ((.def_38 (or .def_6 .def_9)))
(let ((.def_41 (and .def_38 .def_40)))
(let ((.def_12 (not b.counter.3__AT0)))
(let ((.def_42 (or .def_12 .def_41)))
(let ((.def_44 (and .def_42 .def_43)))
(let ((.def_50 (and .def_44 .def_49)))
(let ((.def_63 (and .def_50 .def_62)))
(let ((.def_7 (and .def_4 .def_6)))
(let ((.def_10 (and .def_7 .def_9)))
(let ((.def_36 (and .def_10 .def_12)))
(let ((.def_34 (= b.speed_y__AT0 1.0 )))
(let ((.def_31 (= b.speed_x__AT0 1.0 )))
(let ((.def_27 (= b.y__AT0 10.0 )))
(let ((.def_23 (= b.x__AT0 0.0 )))
(let ((.def_19 (= b.time__AT0 0.0 )))
(let ((.def_21 (and .def_19 b.event_is_timed__AT0)))
(let ((.def_24 (and .def_21 .def_23)))
(let ((.def_28 (and .def_24 .def_27)))
(let ((.def_32 (and .def_28 .def_31)))
(let ((.def_35 (and .def_32 .def_34)))
(let ((.def_37 (and .def_35 .def_36)))
(let ((.def_64 (and .def_37 .def_63)))
(let ((.def_14 (or .def_7 b.counter.3__AT0)))
(let ((.def_13 (or .def_10 .def_12)))
(let ((.def_15 (and .def_13 .def_14)))
(let ((.def_16 (not .def_15)))
(let ((.def_65 (and .def_16 .def_64)))
(let ((.def_142 (and .def_65 .def_141)))
.def_142)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
